

I wanted to make a program that would simplify the processes of working with data and models in the Data Science field. The idea was to cut down on the amount of set-up required to code models in Jupiter notebook by creating an interface that would allow someone to immediately set up the code needed to start laying out interesting data connections. The program would make use of the cmd module for python to create a custom shell for working with user commands easily. The internals of the program would lay out generic templates for various Data Science models, automatically populating it with whatever dataset the user choses to work around. It would also allow the user to preform some basic data trimming before they begin building up their model.

I spent a decent chunk of time working out the structure of the program, and in conjunction with my data science studies I created templates for the common models that I came across. At first I wanted the program to automatically create specific models based on the dataset provided. Basically create a robust analysis with just a run through of the program. Unfortunately for myself I found that it really difficult to go about coding such an idea. I found that without standardizing inputs, I would not be able to complete the program on time. I decided to simplify the idea. I went about designing several generic templates that would lay out the very basics of data science models, then began working on the shell itself. I had a few difficulties with how to exactly work out the internal code, and how to handle the output of the program. I decided to have the program output its results as text in the command window. Originally I was intending it to output to a file. I don't know how to work with .ipynb files. I felt that since the user is most likely working with jupyter notebook, like I was, it would be fastest and easiest to just have them copy and paste the code from the terminal to the notebook.

The internals of the program were another story. The original way the program was to work, was that it was supposed to remember the actions preformed by the user as they worked with a dataset within it. Then at the end it would return the entire history as python code. This was faulty on several levels, as it would limit the interaction the user could have with the program. The user would also be expected to know before hand the actions they wanted preformed on the dataset and complete the actions themselves in order, in one go. A user experience I did not want to happen with this program. Finally it was at odds with the template style that I decided on. So the new approach was to segment each model to its own command, and along with a few others, have specific commands build a 'command list' that would be returned when the program ended. I just had to finalize my code and I would be done.

Unfortunately this is the moment my computer overheated and I lost all the work alongside it. Now I had a problem, with my work lost and the deadline looming I had to rebuild the entire thing. Fortunately, most of the hard work was behind me, I had structured and planned the thing out in good detail. Though now I had to simplify it even further to have it done in time. It lost some sophistication and modularity in how commands could be executed, but the final product works, and what more could you ask from a program?

Am I going to continue working on this program? Of course, since I am going to continue studying Data Science, I will probably benefit greatly from a tool like this. Especially if I polish it to a program that would simplify the work flow that goes into Data Science.
